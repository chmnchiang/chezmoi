# Borrow from https://github.com/leomao/dotfiles/blob/chezmoi/dot_zshrc

#############################
# Load zle
#############################
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

#############################
# Load plugins
#############################
if [[ -f /etc/arch-release ]]; then
  package_list=(fzf diff-so-fancy zsh-syntax-highlighting zsh-completions)
  if ! pacman -Qq ${package_list[@]} > /dev/null 2>&1; then
    echo "You're using Archlinux! Use pacman to manage the following nice tools:"
    echo ${package_list[@]}
    sudo pacman -S --needed ${package_list[@]}
  fi
fi

if [[ -x /usr/bin/fzf && -f /usr/share/fzf/key-bindings.zsh &&
  -f /usr/share/fzf/completion.zsh ]]; then
  source /usr/share/fzf/key-bindings.zsh
  source /usr/share/fzf/completion.zsh
else
  if ! [[ -f ~/.fzf.zsh ]] ; then
    if ! [[ -f ~/.fzf/install ]] ; then
      rm -rf ~/.fzf
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    fi
    ~/.fzf/install --all
  fi
  source ~/.fzf.zsh
fi

export FZF_DEFAULT_OPTS="-m --cycle"
if (( $+commands[rg] )) ; then
  export FZF_DEFAULT_COMMAND='rg -l ""'
elif (( $+commands[ag] )); then
  export FZF_DEFAULT_COMMAND='ag -l -g ""'
fi

if ! [[ -f "${HOME}/.zplug/init.zsh" ]]; then
  curl -sL zplug.sh/installer | zsh
fi
zstyle :zplug:tag depth 1
source "${HOME}/.zplug/init.zsh"

zplug "mafredri/zsh-async"
zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme

if [[ -f /etc/arch-release ]]; then
  if [[ -d /usr/share/zsh/plugins/zsh-syntax-highlighting ]]; then
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  fi
  if [[ -d /usr/share/zsh/plugins/zsh-autosuggestions ]]; then
    source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
  fi
else
  zplug "zsh-users/zsh-completions", use:"*.plugin.zsh"
  zplug "so-fancy/diff-so-fancy", as:command, use:diff-so-fancy
  zplug "zsh-users/zsh-autosuggestions", use:"*.plugin.zsh", defer:2
  zplug "zsh-users/zsh-syntax-highlighting", use:"*.plugin.zsh", defer:3
fi

export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

#############################
# Options
#############################
# don't record duplicate history
setopt hist_ignore_dups

# no flow control
setopt noflowcontrol

# rm confirmation
setopt rm_star_wait

# Directory Stack settings
DIRSTACKSIZE=8
# make cd = pushd
setopt autopushd
# swap cd + and cd -
setopt pushdminus
# if out of stack bound, auto cd home
setopt pushdtohome

#############################
# Key bindings
#############################
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

bindkey -v '^?' backward-delete-char
bindkey -v '^u' backward-kill-line
bindkey -v '^w' backward-kill-word
bindkey -v '^[f' forward-word
bindkey -v '^[b' backward-word

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

#############################
# Aliases
#############################

alias ls='ls -h --color --group-directories-first'
# Use exa to replace ls
if (( $+commands[exa] )) ; then
    alias ls='exa --group-directories-first'
fi
alias l='ls -al'

# Alias these dangerous command to prevent error
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -I'

# Show history
alias history='fc -l 1'
alias dirs='dirs -v'

# set Tmux default 256 color
alias tmux='tmux -2'

alias e="${EDITOR}"
alias sudoe='sudoedit'

alias v='cat'
if (( $+commands[bat] )) ; then
  alias v='bat'
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
elif (( $+commands[batcat] )) ; then
  alias v='batcat'
  export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
fi

alias p='pikaur'

#############################
# Completions
#############################
# Important
zstyle ':completion:*:default' menu yes=long select=2

# Completing Groping
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{226}Completing %F{214}%d%f'
zstyle ':completion:*' group-name ''

# Completing misc
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} r:|[._-]=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}'
zstyle ':completion:*' verbose yes
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*:*files' ignored-patterns '*?.o' '*?~' '*\#'
zstyle ':completion:*' use-cache true
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

# Directory
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# default: --
zstyle ':completion:*' list-separator '-->'
zstyle ':completion:*:manuals' separate-sections true

zle -C complete-file complete-word _generic
zstyle ':completion:complete-file::::' completer _files
bindkey '^xf' complete-file

# Use gpg-agent for ssh
if (( $+commands[gpg] )) ; then
  unset SSH_AGENT_PID
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  fi
  export GPG_TTY=$(tty)
  gpg-connect-agent updatestartuptty /bye >/dev/null
fi

# load custom settings
if [[ -f "${HOME}/.zshrc.local" ]]; then
    source "${HOME}/.zshrc.local"
fi
